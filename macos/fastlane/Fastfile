# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
#update_fastlane

default_platform(:mac)

platform :mac do
  desc "Create Keychain for Ci/CD"
  lane :setup_ci_keychain do
    # Create the keychain
    create_keychain(
      name: "AppSigning",
      default_keychain: true,
      add_to_search_list: true,
      unlock: true,
      password: "temp-keychain_password"
    )
    # Fetch App Store Certificates
    match(
      type: "appstore",
      readonly: true,
      platform: "macos",
      app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier),
      additional_cert_types: ["mac_installer_distribution"],
      keychain_name: "AppSigning",
      keychain_password: "temp-keychain_password",
    )
  end
  desc "Push a new release build to the App Store"
  lane :release_ci do
    # Create the keychain
    create_keychain(
      name: "AppSigning",
      default_keychain: true,
      add_to_search_list: true,
      unlock: true,
      password: "temp-keychain_password"
    )
    # Fetch App Store Certificates
    match(
      type: "appstore",
      readonly: true,
      platform: "macos",
      app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier),
      additional_cert_types: ["mac_installer_distribution"],
      keychain_name: "AppSigning",
      keychain_password: "temp-keychain_password",
    )
    build_mac_app(
      export_team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
      export_method: "app-store",
      installer_cert_name: ENV["DEVELOPER_INSTALLER_CERT_NAME"],
    )
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_KEY_ID"],
      issuer_id: ENV["APP_STORE_ISSUER_ID"],
      key_filepath: "./../private_keys/app_store.p8",
      in_house: false
    )
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)[0]
    )
    delete_keychain(
      name: "AppSigning"
    )
    sh "security default-keychain -s login.keychain || true"
  end

  desc "Push a new release build to the App Store"
  lane :release do
    # Fetch App Store Certificates
    match(
      type: "appstore",
      readonly: true,
      platform: "macos",
      app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier),
      additional_cert_types: ["mac_installer_distribution"]
    )
    build_mac_app(
      export_team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
      export_method: "app-store",
      installer_cert_name: ENV["DEVELOPER_INSTALLER_CERT_NAME"],
    )
    begin
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_KEY_ID"],
      issuer_id: ENV["APP_STORE_ISSUER_ID"],
      key_filepath: "./../private_keys/app_store.p8",
      in_house: false
    )
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)[0]
    )
    rescue => e
      sh "open -a transporter"
      sh "open -R ./../Appe_Coree.pkg"
    end
  end
end
