name: "[Flutter] Deploy Everything"
on:
  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - "android/**"
      - "assets/**"
      - "ios/**"
      - "lib/**"
      - "web/**"
      - "test/**"
      - "pubspec.yaml"
      - "analysis_options.yaml"
  workflow_dispatch:
    inputs:
      android:
        description: "Deploy Android?"
        required: true
        type: boolean
        default: true
      ios:
        description: "Deploy iOS?"
        required: true
        type: boolean
        default: true
      cloudflare:
        description: "Deploy to Cloudflare Pages?"
        required: true
        type: boolean
        default: false
      github_pages:
        description: "Deploy to GitHub Pages?"
        required: true
        type: boolean
        default: false
      firebase_hosting:
        description: "Deploy to Firebase Hosting?"
        required: true
        type: boolean
        default: false
      firebase_hosting_path:
        description: "Path to deploy to Firebase Hosting?"
        required: true
        type: string
        default: "/"

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: "deploy"
  cancel-in-progress: false

jobs:
  version:
    name: Create version number
    if: ${{ github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'}}
    # Works only on ubuntu
    runs-on: ubuntu-latest
    outputs:
      app_id: ${{ steps.extract_app_id.outputs.app_id }}
      firebase_id: ${{ steps.firebase_id.outputs.firebase_id }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [[ "${GITHUB_REF#refs/heads/}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Branch name matches the pattern *.*.* - stopping"
            echo "version=${GITHUB_REF#refs/heads/}"
            echo "version=${GITHUB_REF#refs/heads/}" >> "$GITHUB_OUTPUT"
            echo "${GITHUB_REF#refs/heads/}" > version.txt
            exit 0
          fi
          echo "Branch name does not match the pattern *.*.* - continuing"
          if [[ ! -n $(git log --merges -1 --pretty=%B | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+') ]]; then
            echo "Latest merge isn't from a branch matching *.*.* - Either repo rules are set wrong or somebody bypassed protections or it was ran from a different branch than main or version branch"
            exit 1
          fi
          version=$(git log --merges -1 --pretty=%B | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
          echo "version=$version"
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "$version" > version.txt

      - name: Update version in YAML
        run: |
          sed -i "s/^version: .*/version: $(tr -d '\n' < version.txt)+${{ github.run_number }}/" pubspec.yaml

      - name: Upload pubspec.yaml
        uses: actions/upload-artifact@v4
        with:
          name: pubspec
          path: pubspec.yaml

      - name: Get applicationId
        id: extract_app_id
        run: |
          application_id=$(grep -oP 'applicationId\s*=\s*"\K[^"]+' android/app/build.gradle)
          echo "app_id=$application_id"
          echo "app_id=$application_id" >> "$GITHUB_OUTPUT"

      - name: Get Firebase app id
        id: firebase_id
        run: |
          firebase_id=$(grep -A 2 'static const FirebaseOptions android' lib/firebase_options.dart | grep 'appId' | awk -F"'" '{print $2}')
          echo "firebase_id=$firebase_id"
          echo "firebase_id=$firebase_id" >> "$GITHUB_OUTPUT"
  deploy_ios:
    name: "[iOS] Deploy to App Store"
    runs-on: macos-latest
    environment:
      name: app-store
    needs: version
    if: ${{ github.event.pull_request.merged == true || github.event.inputs.ios == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get pubspec
        uses: actions/download-artifact@v4
        with:
          name: pubspec

      # Install flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      - name: Get Certificates
        run: |
          git revert --no-commit f57df1c168d1d108e6043f9d39c3bfbce6692cbf # Reverting the commit that changes release provisioning profile to a development one
          cd ios
          bundle install
          bundle exec fastlane setup_ci_keychain
          cd ..
        env:
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.IOS_KEYS_PAT }}
          MATCH_PASSWORD: ${{ secrets.IOS_KEYS_MATCH_PASSWORD }}

      - name: Building IPA
        run: flutter build ipa --split-debug-info symbolsIos --obfuscate --release || true

      - name: Signing the app and publishing to App Store
        run: |
          echo ${{ secrets.IOS_APPSTORE_CERT_BASE64 }} | base64 --decode > private_keys/app_store.p8
          cd ios  
          bundle exec fastlane release_ci
        env:
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.IOS_KEYS_PAT }}
          MATCH_PASSWORD: ${{ secrets.IOS_KEYS_MATCH_PASSWORD }}

      # Collect the file and upload as artifact
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          # Path to the release files
          path: ios/*.ipa

      - name: Remove private keys
        if: always()
        run: rm -rf private_keys
  deploy_macos:
    name: "[macOS] Deploy to App Store"
    runs-on: macos-latest
    environment:
      name: app-store-macos
    needs: version
    if: ${{ github.event.inputs.macos == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get pubspec
        uses: actions/download-artifact@v4
        with:
          name: pubspec

      # Install flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      - name: Get Certificates
        run: |
          cd macos
          bundle install
          bundle exec fastlane setup_ci_keychain
          cd ..
        env:
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.IOS_KEYS_PAT }}
          MATCH_PASSWORD: ${{ secrets.IOS_KEYS_MATCH_PASSWORD }}

      - name: Building macos
        run: flutter build macos --split-debug-info symbolsMacOS --obfuscate --release || true

      - name: Signing the app and publishing to App Store
        run: |
          echo ${{ secrets.IOS_APPSTORE_CERT_BASE64 }} | base64 --decode > private_keys/app_store.p8
          cd macos  
          bundle exec fastlane release_ci
          cd ..
        env:
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.IOS_KEYS_PAT }}
          MATCH_PASSWORD: ${{ secrets.IOS_KEYS_MATCH_PASSWORD }}

      # Collect the file and upload as artifact
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          # Path to the release files
          path: macos/*.pkg

      - name: Remove private keys
        if: always()
        run: rm -rf private_keys
  build_web:
    name: "[Web] Build Web"
    if: ${{ github.event.pull_request.merged == true || github.event.inputs.cloudflare == 'true' || github.event.inputs.github_pages == 'true' || github.event.inputs.firebase_hosting == 'true' }}
    needs: version
    # Works on ubuntu and macOS. Should propably work on windows as well
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get pubspec
        uses: actions/download-artifact@v4
        with:
          name: pubspec
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true
      - name: Build web
        run: flutter build web --release
      - name: Copy index.html to 404.html
        run: cp build/web/index.html build/web/404.html
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: build/web

  deploy_cloudflare:
    name: "[Web] Deploy to Cloudflare Pages"
    if: ${{ github.event.pull_request.merged == true || github.event.inputs.cloudflare == 'true' }}
    needs: build_web
    # Works on ubuntu and macOS. Should propably work on windows as well
    runs-on: ubuntu-latest
    environment:
      name: cloudflare-pages
      url: ${{ vars.CLOUDFLARE_PAGES_URL }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git fetch origin dist-cloudflare-pages:dist-cloudflare-pages || true
          git checkout dist-cloudflare-pages || true
          find . -maxdepth 1 ! -name ".git" ! -name "." -exec rm -rf {} +

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: web-build

      - name: Deploy to Cloudflare Pages
        run: |
          # Push the new branch to the repository
          git commit -a -m "Built web"
          git push origin dist-cloudflare-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Wait for deployment
        run: |
          sleep 30
      - name: Purge cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ vars.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_PURGE_KEY }}" \
            -H "Content-Type: application/json" \
              --data '{"purge_everything": true}'

  deploy_firebase:
    name: "[Web] Deploy to Firebase Hosting"
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true || github.event.inputs.firebase_hosting == 'true' }}
    environment:
      name: firebase-hosting
      url: ${{ vars.FIREBASE_HOSTING_URL }}
    needs: build_web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get build artifact
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: build/web
      - name: Rewrite base href
        run: |
          sed -i 's|<base href="/">|<base href="${{ github.event.inputs.firebase_hosting_path }}"/>|' build/web/index.html

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_APP_ELEVATE_CORE }}
          channelId: live
          projectId: app-elevate-core

  deploy_github_pages:
    name: "[Web] Deploy to GitHub Pages"
    if: ${{ github.event.pull_request.merged == true || github.event.inputs.github_pages == 'true' }}
    permissions:
      contents: read
      pages: write
      id-token: write
    needs: build_web
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifact
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: build/web

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Get custom domain from GitHub API
        id: get_custom_domain
        run: |
          CUSTOM_DOMAIN=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pages | jq -r .cname)
          if [ "$CUSTOM_DOMAIN" != "null" ]; then
            echo "CUSTOM_DOMAIN=$CUSTOM_DOMAIN"
            echo "CUSTOM_DOMAIN=$CUSTOM_DOMAIN" >> $GITHUB_ENV
          fi

      - name: Rewrite base href
        run: |
          if [ ! -n "$CUSTOM_DOMAIN" ]; then
          sed -i "s|<base href=\"/\">|<base href=\"/$(basename $GITHUB_REPOSITORY)/\">|" build/web/index.html
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: "./build/web"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  build_android:
    name: "[Android] Build App Bundle"
    needs: version
    if: ${{ github.event.pull_request.merged == true || github.event.inputs.android == 'true' }}
    # Works on ubuntu and macOS. Should propably work on windows as well
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get pubspec
        uses: actions/download-artifact@v4
        with:
          name: pubspec

      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.2.4
        with:
          fileName: upload-keystore.jks
          encodedString: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
          echo "storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17.x"
          cache: "gradle"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      - name: Start release build
        run: |
          flutter build appbundle --split-debug-info symbolsAndroid --obfuscate --release

      - name: Release Artifact Upload
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: build/app/outputs/bundle/release/app-release.aab

      - name: Debug symbols Artifact Upload
        uses: actions/upload-artifact@v4
        with:
          name: symbolsAndroid
          path: symbolsAndroid
  deploy_android:
    name: "[Android] Deploy to Google Play Store"
    needs:
      - build_android
      - version
    # Tested on ubuntu but there is no reason why it shouldn't work on macOS or windows
    runs-on: ubuntu-latest
    environment:
      name: google-play

    steps:
      - name: Get Android Build from artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-release

      - name: Release Build to internal track
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: ${{needs.version.outputs.app_id}}
          releaseFiles: app-release.aab
          track: internal
          status: draft
  symbols_android:
    name: "[Android] Upload Crashlytics Symbols"
    # Doesn't work on ubuntu, Windows works sometimes but it's super slow. macOS is the best option
    runs-on: macos-latest
    needs:
      - version
      - build_android
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Android debug symbols from artifacts
        uses: actions/download-artifact@v4
        with:
          name: symbolsAndroid
          path: symbolsAndroid

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Upload Crashlytics Symbols
        run: |
          firebase crashlytics:symbols:upload --non-interactive --app=${{needs.version.outputs.firebase_id}} symbolsAndroid
