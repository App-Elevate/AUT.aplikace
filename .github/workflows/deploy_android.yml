name: Android Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
jobs:
  version:
    name: Create version number and extract applicationId
    runs-on: ubuntu-latest
    outputs:
      app_id: ${{ steps.extract_app_id.outputs.app_id }}
      firebase_id: ${{ steps.firebase_id.outputs.firebase_id }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: "5.x"
    - name: Use GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v1.1.1
    - name: Create version.txt with nuGetVersion
      run: echo ${{ steps.gitversion.outputs.nuGetVersion  }} > version.txt
    - name: Update version in YAML
      run: |
        sed -i "s/^version: .*/version: $(tr -d '\n' < version.txt)+${{ github.run_number }}/" pubspec.yaml
    - name: Upload pubspec.yaml
      uses: actions/upload-artifact@v4
      with:
        name: pubspec
        path: pubspec.yaml

    - name: Get applicationId
      id: extract_app_id
      run: |
        application_id=$(grep -oP 'applicationId\s*=\s*"\K[^"]+' android/app/build.gradle)
        echo "app_id=$application_id"
        echo "app_id=$application_id" >> "$GITHUB_OUTPUT"
    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Get Firebase app id
      id: firebase_id
      run: |
        firebase_id=$(jq -r '.client[0].client_info.mobilesdk_app_id' android/app/google-services.json)
        echo "firebase_id=$firebase_id"
        echo "firebase_id=$firebase_id" >> "$GITHUB_OUTPUT"
  build:
    needs: version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Get pubspec
      uses: actions/download-artifact@v4
      with:
        name: pubspec
    - name: Download Android keystore
      id: android_keystore
      uses: timheuer/base64-to-file@v1.2.4
      with:
        fileName: upload-keystore.jks
        encodedString: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
    - name: Create key.properties
      run: |
        echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
        echo "storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" >> android/key.properties
        echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: "12.x"
    - name: Cache Android SDK
      id: cache-android-sdk
      uses: actions/cache@v2
      with:
        path: /opt/android-sdk
        key: ${{ runner.os }}-android-sdk

    - name: Install Android SDK Tools
      if: steps.cache-android-sdk.outputs.cache-hit != 'true'
      env:
        ANDROID_HOME: ${{ runner.temp }}/android-sdk
      run: |
        mkdir -p $ANDROID_HOME
        curl -Lo sdk-tools.zip https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip
        unzip sdk-tools.zip -d $ANDROID_HOME
        rm sdk-tools.zip
        mkdir -p $ANDROID_HOME/cmdline-tools/latest
        mv $ANDROID_HOME/tools/* $ANDROID_HOME/cmdline-tools/latest
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-30"

    - name: Update cache
      if: steps.cache-android-sdk.outputs.cache-hit != 'true'
      uses: actions/cache@v2
      with:
        path: /opt/android-sdk
        key: ${{ runner.os }}-android-sdk
        restore-keys: |
          ${{ runner.os }}-android-sdk
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        cache: true
    - name: Start release build
      run: |
        flutter config --no-analytics
        flutter config --no-cli-animations
        flutter build appbundle --split-debug-info symbolsAndroid --obfuscate
    - name: Release Artifact Upload
      uses: actions/upload-artifact@v4
      with:
        name: android-release
        path: build/app/outputs/bundle/release/app-release.aab
    - name: Debug symbols Artifact Upload
      uses: actions/upload-artifact@v4
      with:
        name: symbolsAndroid
        path: symbolsAndroid
  deploy:
    name: Deploy Android Build
    needs: 
    - build
    - version
    runs-on: ubuntu-latest
    steps:
    - name: Get Android Build from artifacts
      uses: actions/download-artifact@v4
      with:
        name: android-release
    - name: Release Build to internal track
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: ${{needs.version.outputs.app_id}}
        releaseFiles: app-release.aab
        track: internal
        status: draft
  symbols:
    name: Upload debug symbols
    environment: Crashalytics
    needs: 
    - build
    - version
    runs-on: ubuntu-latest
    steps:
    - name: Get Android debug symbols from artifacts
      uses: actions/download-artifact@v4
      with:
        name: symbolsAndroid
        path: symbolsAndroid
    - name: list the files
      run: ls -R
    - name: GitHub Action for Firebase
      uses: w9jds/firebase-action@v13.11.4
      env:
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      with:
        args: crashlytics:symbols:upload --app=${{needs.version.outputs.firebase_id}} symbolsAndroid




              