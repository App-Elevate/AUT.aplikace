name: Android Release

on:
  #push:
    #branches: [ "main" ]
  #pull_request:
    #branches: [ "main" ]
  workflow_dispatch:

jobs:
  version:
    name: Create version number and extract applicationId
    # Works only on ubuntu
    runs-on: ubuntu-latest
    outputs:
      app_id: ${{ steps.extract_app_id.outputs.app_id }}
      firebase_id: ${{ steps.firebase_id.outputs.firebase_id }}
      version: ${{ steps.gitversion.outputs.nuGetVersion }}
    steps:

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: "5.x"

    - name: Use GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v1.1.1

    - name: Create version.txt with nuGetVersion
      run: echo ${{ steps.gitversion.outputs.nuGetVersion  }} > version.txt

    - name: Update version in YAML
      run: |
        sed -i "s/^version: .*/version: $(tr -d '\n' < version.txt)+${{ github.run_number }}/" pubspec.yaml

    - name: Upload pubspec.yaml
      uses: actions/upload-artifact@v4
      with:
        name: pubspec
        path: pubspec.yaml

    - name: Get applicationId
      id: extract_app_id
      run: |
        application_id=$(grep -oP 'applicationId\s*=\s*"\K[^"]+' android/app/build.gradle)
        echo "app_id=$application_id"
        echo "app_id=$application_id" >> "$GITHUB_OUTPUT"

    - name: Get Firebase app id
      id: firebase_id
      run: |
        firebase_id=$(jq -r '.client[0].client_info.mobilesdk_app_id' android/app/google-services.json)
        echo "firebase_id=$firebase_id"
        echo "firebase_id=$firebase_id" >> "$GITHUB_OUTPUT"


  build:
    needs: version
    # Works on ubuntu and macOS. Should propably work on windows as well
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get pubspec
      uses: actions/download-artifact@v4
      with:
        name: pubspec

    - name: Download Android keystore
      id: android_keystore
      uses: timheuer/base64-to-file@v1.2.4
      with:
        fileName: upload-keystore.jks
        encodedString: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}

    - name: Create key.properties
      run: |
        echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
        echo "storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" >> android/key.properties
        echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: "17.x"
        cache: 'gradle'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable'
        cache: true

    - name: Start release build
      run: |
        flutter build appbundle --split-debug-info symbolsAndroid --obfuscate

    - name: Release Artifact Upload
      uses: actions/upload-artifact@v4
      with:
        name: android-release
        path: build/app/outputs/bundle/release/app-release.aab

    - name: Debug symbols Artifact Upload
      uses: actions/upload-artifact@v4
      with:
        name: symbolsAndroid
        path: symbolsAndroid


  deploy:
    name: Deploy Android Build
    needs: 
    - build
    - version
    # Tested on ubuntu but there is no reason why it shouldn't work on macOS or windows
    runs-on: ubuntu-latest

    steps:

    - name: Get Android Build from artifacts
      uses: actions/download-artifact@v4
      with:
        name: android-release

    - name: Release Build to internal track
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: ${{needs.version.outputs.app_id}}
        releaseFiles: app-release.aab
        track: internal
        status: draft
  symbols:
    name: Upload debug symbols
    # Doesn't work on ubuntu, Windows works sometimes but it's super slow. macOS is the best option
    runs-on: macos-latest
    needs:
    - version
    - build
    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get Android debug symbols from artifacts
      uses: actions/download-artifact@v4
      with:
        name: symbolsAndroid
        path: symbolsAndroid

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
    
    - name: Upload Crashlytics Symbols
      run: |
        firebase crashlytics:symbols:upload --non-interactive --app=${{needs.version.outputs.firebase_id}} symbolsAndroid     