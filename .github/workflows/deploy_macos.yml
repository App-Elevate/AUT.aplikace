name: "[macOS] Deploy to App Store"
on:
  #push:
  #branches: ["main"]
  workflow_dispatch:

concurrency:
  group: "macos"
  cancel-in-progress: false

jobs:
  version:
    name: Create version number and extract applicationId
    # Works only on ubuntu
    runs-on: ubuntu-latest
    outputs:
      app_id: ${{ steps.extract_app_id.outputs.app_id }}
      firebase_id: ${{ steps.firebase_id.outputs.firebase_id }}
      version: ${{ steps.gitversion.outputs.nuGetVersion }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1.1.1
        with:
          versionSpec: "5.x"

      - name: Use GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1.1.1

      - name: Create version.txt with nuGetVersion
        run: echo ${{ steps.gitversion.outputs.nuGetVersion  }} > version.txt

      - name: Update version in YAML
        run: |
          sed -i "s/^version: .*/version: $(tr -d '\n' < version.txt)+${{ github.run_number }}/" pubspec.yaml

      - name: Upload pubspec.yaml
        uses: actions/upload-artifact@v4
        with:
          name: pubspec
          path: pubspec.yaml

      - name: Get applicationId
        id: extract_app_id
        run: |
          application_id=$(grep -oP 'applicationId\s*=\s*"\K[^"]+' android/app/build.gradle)
          echo "app_id=$application_id"
          echo "app_id=$application_id" >> "$GITHUB_OUTPUT"

      - name: Get Firebase app id
        id: firebase_id
        run: |
          firebase_id=$(grep -A 2 'static const FirebaseOptions android' lib/firebase_options.dart | grep 'appId' | awk -F"'" '{print $2}')
          echo "firebase_id=$firebase_id"
          echo "firebase_id=$firebase_id" >> "$GITHUB_OUTPUT"
  build:
    runs-on: macos-latest
    needs: version
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get pubspec
        uses: actions/download-artifact@v4
        with:
          name: pubspec

      # Install flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      - name: Get Certificates
        run: |
          cd macos
          bundle install
          bundle exec fastlane setup_ci_keychain
          cd ..
        env:
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.IOS_KEYS_PAT }}
          MATCH_PASSWORD: ${{ secrets.IOS_KEYS_MATCH_PASSWORD }}

      - name: Signing the app and publishing to App Store
        run: |
          echo ${{ secrets.IOS_APPSTORE_CERT_BASE64 }} | base64 --decode > private_keys/app_store.p8
          sh scripts/compile_macos.sh
        env:
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.IOS_KEYS_PAT }}
          MATCH_PASSWORD: ${{ secrets.IOS_KEYS_MATCH_PASSWORD }}

      # Collect the file and upload as artifact
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          # Path to the release files
          path: macos/*.pkg

      - name: Remove private keys
        if: always()
        run: rm -rf private_keys
